ncl | self |
Root element of document.| 

ncl | id | 
Uniquely identifies within the document NCL.
Its value is an XML identifier. |

ncl | xmlns |
Declares a namespace XML,that is, it declare
the primary collection of buildings used by
document. The value of the attribute is the URL
(Uniform Resource Locator) that identifies where
the namespace is officially defined. | 

ncl | title |
Provides further information about the element.
Attribute values title can be used by user agent
in different ways. |

head | self |
The order in which the child elements of <head> must
necessarily appear is:
importedDocumentBase?, ruleBase?, transitionBase?,
regionBase*, descriptorBase?, connectorBase?, meta*,
metadata* |

regionBase | self |
Regions bas of the document NCL.
Defines a set of elements <region> each of which may
contain another set of elements <region> nested, and
so on, recursively. |

regionBase | id |
Uniquely identifies the element within the 
document NCL. Its value is an XML identifier. |

regionBase | device |
Identifies the combination of an element <regionBase>
to a device where the presentation will take place.
This attribute can have the values: “systemScreen(i)” 
or “systemAudio(i)”. The device chosen defines the 
global environment variables: systemScreenSize(i), 
systemScreenGraphicSize(i) and systemAudioType(i). |

region | self |
Set in what position the device the objects are initially
presented. The position of a region, as specified by its
attributes top, bottom, left and right, is always relative
to the parent geometry, which is defined by the element 
<region> father or the total area of the device in the
case of regions in the first nesting level. |

region | id |
Uniquely identifies the element within the 
document NCL. Its value is an XML identifier. |

region | title |
Provides further information about the element. The
values of attribute title can be used by user agent
in different ways. |

region | top | 
Positions the top edge of the region within the 
specified distance from the top edge of the parent
region (or top edge of the device, in the case of 
regions in the first nesting level). Can have 
percentage values non-negative, or pixel units. |

region | left |
Positions the left edge of the region within the
specified distance from the left edge of the parent
region (or left edge of the device, in the case of
regions in the first nesting level). Can have
percentage values non-negative, or pixel units. |

region | bottom |
Positions the bottom of the region within the
specified distance from the bottom of the parent
region (or bottom of the device, in the case of
regions in the first nesting level). Can have
percentage values non-negative, or pixel units. |

region | right | 
Positions the right edge of the region within the
specified distance from the right edge of the parent
region (or right edge of the device, in the case of
regions in the first nesting level). Can have
percentage values non-negative, or pixel units. |

region | width |
Sets the width of a region. Can have percentage values
non-negative, or pixel units. |

region | height |
Sets the height of a region. Can have percentage values
non-negative, or pixel units.

region | zIndex | 
Specifies the precedence of overlapping region. 
Regions with higher zIndex must be stacked on 
top of regions with lower zIndex values. If two
regions have the same value zIndex worth the 
temporal order. |

descriptorBase | self |
Specified the set of descriptors of a document
and must be child of the element <head> |

descriptorBase | id | 
Uniquely identifies the element within the document NCL.
Its value is an XML identifier. |

descriptor | self | 
Contains a set of optional attributes, grouping all
the space-time settings to be used according to the
type of object to be displayed. The definition of 
elements <descriptor> must necessarily be included in
the document header, within the element <descriptorBase>. |

descriptor | id | 
Uniquely identifies the element within the document NCL.
Its value is an XML identifier. |

descriptor | player | 
Identifies the presentation tool to be used. |

descriptor | region |
Refers to the region defined by the elements
<region> of <regionBase>. |

descriptor | explicitDur |
Optimal duration of an object. | 

descriptor | freeze | 
Specifies what happens to an object at
the end of its presentation. |

descriptor | moveLeft | 
Specifies a value equal to the value of
focusIndex associated with the element on
which the focus will be applied when the
"left arrow key" is pressed. |

descriptor | moveRight | 
Specifies a value equal to the value of
focusIndex associated with the element on
which the focus will be applied when the
"right arrow key" is pressed. |

descriptor | moveUp | 
Specifies a value equal to the value of
focusIndex associated with the element on
which the focus will be applied when the
"up arrow key" is pressed. |

descriptor | moveDown | 
Specifies a value equal to the value of
focusIndex associated with the element on
which the focus will be applied when the
"down arrow key" is pressed. |

descriptor | focusIndex | 
Specifies an index for the element <media> on
which the focus can be applied when this element
is in view, using the element <descriptor> that
defined the attribute.
When an element <descriptor> not set this attribute,
it is considered as if he coul not receive the
focus. At one point the presentation, if the focus
has not yet been defined, or is lost, a focus will
initially be applied to the element that is being
presented which descriptor has the lowest index
value. Attribute values focusIndex must be unique 
in documents NCL. |

descriptor | focusBorderColor | 
Provide the accent color and can receive the names:
“white”, “black”, “silver”, “gray”, “red”, “maroon”, 
“fuchsia”, “purple”, “lime”, “green”, “yellow”, 
“olive”, “blue”, “navy”, “aqua”, or “teal” |

descriptor | focusBorderWidth | 
Sets the pixel width of the border in focus (0 means 
no border appears, positive values means that the 
border is out of the contents of the object and negative
values mean that the border is drawn on the content
of the object) |

descriptor | focusBorderTransparency | 
Sets the transparency of the highlight color. Necessarily
be a real value between 0 and 1, or a real value in
the range [0.100] ending with the character "%" (for 
example, 30%), with "1" or "100%" meaning full
transparency and "0" or "0%" meaning no transparency. |

descriptor | focusSrc | 
Specifies alternative content to be displayed,
rather than the content of the current presentation,
if an element receive the focus. This attribute follows
the same rules of src attribute of the element
<media> |

descriptor | selBorderColor |
Specifies a border color, when selected, the box
defined by the attributes of element positioning. |

descriptor | focusSelSrc | 
Specifies an alternate media content to be displayed
when an element in focus is selected by pressing
the activation key. This attribute follows the same
rules of src attribute of the element <media> |

descriptor | transIn | 
Reference a transition that will start the beginning
of the active duration of the media elements (when
the presentation of the object starts). Is a list
separated by semicolons of the identifiers of transitions.
Each of the identifiers must necessarily match the
value of the XML identifier of one the transition elements
previously defined by element <transitionBase>. The
purpose of this list separated by semicolons is allows
authors to specify a set of alternative transitions
(fallback) if the preferred transition is not available. |

descriptor | transOut |
Reference a transition that will start at the end
of the active duration of the media elements (when
the presentation of the object starts). Is a list
separated by semicolons of the identifiers of transitions.
Each of the identifiers must necessarily match the
value of the XML identifier of one the transition elements
previously defined by element <transitionBase>. The
purpose of this list separated by semicolons is allows
authors to specify a set of alternative transitions
(fallback) if the preferred transition is not available. | 

descriptorParam | self | 
They are utilized to parameterize the control presentation
of the object associated with the element descriptor.
These parameters can, for example, redefine some attribute
values defined by the attributes of the region |

descriptorParam | name |
Indicates the name of parameter/attribute | 

descriptorParam | value |
Specifies an initial value for the
parameter/value defined | 

descriptorSwitch | self |
Contains a set of alternative descriptor to
be associated with an object. The choise of
<descriptorSwitch> is done in time presentation,
using test rules previously defined. |

descriptorSwitch | id | 
Uniquely identifies the element within the NCL document
Its value is an XML identifier. |

defaultDescriptor | self | 
Identifies the element (default) which must 
necessarily be selected if none of the rules 
bindRule is true. |   

defaultDescriptor | descriptor |
Reference a default <descriptor>, children
of <descriptorSwitch>, if none of rules
bindRule is true. |

ruleBase | self | 
Allows the definition of rules that, when
met, select alternatives for presenting the
document and must necessarily be defined as
child element of the element <head>. |

ruleBase | id | 
Uniquely identifier the element within a NCL document.
Its value is an XML identifier. |

rule | self | 
Difine simple rules, in the other words, only comparing
one value with a variable. |

rule | id |
Uniquely identifier the element within a NCL document.
Its value is an XML identifier. |

rule | var | 
A variable which must be necessarily a property of the
node settings (<media> element of type application/x-ginga-settings),
in the other words, the var attribute must necessarily
possess the same value of the name attribute of a <property>
element, definded as child of <media> element of type
application/x-ginga-settings. |

rule | comparator | 
A comparator (eq, ne, gt, ge, lt, le) that relates
the variable defined by var with a value set for
value. |

compositeRule | self | 
Define composite rules, in the other words,
compositions of simple rules. |

compositeRule | id | 
Uniquely identifier the element within a NCL document.
Its value is an XML identifier. |

compositeRule | operator | 
Define how their child rules will be related.
This attribute can have values "or" and "and". |

bindRule | self | 
Used to associate rules with components of a
<switch> or <descriptorSwitch> element. |

bindRule | constituent | 
Refer a child component of <switch> or <descriptorSwitch>
to which it belongs. |

bindRule | rule | 
Reference one of children rules of the <bindRule> element,
be it simple or compound rules. |

importBase | self | 
Allows a base of entities be corporate to 
other existing base. |

importBase | documentURI | 
Refers to a URI corresponding to the NCL document 
containing the base to be imported. |

importBase | alias | 
Specifies a name to be used as a prefix when necessary
to refer to elements of this imported base. The name of
the alias attribute must necessarily be unique within
a document and its scope is restricted to the document
that defined it.
The reference would have the format: # alias element_id.
The import operation is transitive, in other words,
if the baseA imports the baseB, which imports the baseC,
so the baseA imports the baseC. However, the alias defined
to baseC within baseB must not be considered by baseA. | 

importedDocumentBase | self |
Specifies a set of NCL documents imported and must
necessarily to be defined as child element of <head> element. |

importedDocumentBase | id |
Uniquely identifier the element within a NCL document.
Its value is an XML identifier. |

importNCL | self | 
Used to import a NCL document. All the bases
defined within a NCL document, as all the
element <body> of document, are imported
all at once, through the element <importNCL>.
The bases are treated as if each one had been
imported by an element <importBase>. The <body> 
element imported will be treated as an element
<context>. The <importBase> element doesn't 
"include" the NCL document refered, but only
makes visible the referenced document so that
their components can be reused by the documents
that defined the element <imporNCL>. Thus, the 
<body> imported, and any of its nodes can be 
reused within of <body> element of the NCL
document that has done the import. The operation
of <importNCL> element also has the transitive
property, in other words, if the documentA imports
the documentB, which imports the documentC, so
the documentA also imports the documentC. However,
the alias defined to documentC within the documentB
must not be considered by documentA. |

importNCL | documentURI |
Refers to a URI corresponding to document
to be imported. |

importNCL | alias | 
Specifies a name to be used when is realized
a reference to elements in this imported
document. As in <importBase> element, the name
must be unique (type=ID) and its scope is
restricted to the document that defined the
alias attribute. The reference would have the
format: alias#element_id. Importantly, the same
alias should be used when it is necessary to refer
to elements defined on the bases of the imported
document (<regionBase>, <connectorBase>, <descriptorBase, etc) |

transitionBase | self | 
Especifica um conjunto de efeitos de transição e 
deve obrigatoriamente ser definido como 
elemento-filho do elemento <head> |

transitionBase | id | 
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML |

transition | self | 
Permite que um padrão (template) de transição seja definido. 
As transições são classificadas de acordo com uma taxonomia 
de dois níveis: tipos e subtipos. 
Cada tipo de transição descreve um grupo de transições que 
são intimamente relacionadas. 
Dentro desse tipo, cada uma das transições individuais é 
associada a um subtipo que enfatiza as características 
distintas da transição |

transition | id | 
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML |

transition | type | 
Obrigatório e utilizado para especificar a transição geral. 
Se o tipo nomeado não for suportado pelo formatador NCL, 
a transição deve obrigatoriamente ser ignorada. Isso não é 
uma condição de erro, pois as implementações são livres 
para ignorar transições |

transition | subtype | 
Fornece o controle específico para a transição. 
Esse atributo é opcional e, se especificado, deve 
obrigatoriamente ser um dos subtipos de transição 
apropriados para o tipo correspondente. 
Se esse atributo não for especificado, a transição 
deve obrigatoriamente ser revertida para o subtipo 
default do tipo especificado |

transition | dur | 
Especifica a duração da transição em segundos. 
A duração default é de 1s |

transition | startProgress | 
Especifica a quantidade de efeito de 
transição do início da execução. 
Os valores permitidos são 
números reais na faixa [0.0,1.0]. 
Por exemplo, pode-se querer iniciar um crossfade com 
imagem destino já transparente em 50 % inicialmente. 
Para esse caso, o startProgress seria 0.5. 
O valor default é 0.0 |

transition | endProgress | 
Especifica a quantidade de efeito de 
transição ao término da execução. 
Os valores permitidos são números reais na faixa [0.0,1.0] 
e o valor desse atributo deve obrigatoriamente 
ser maior ou igual ao valor do atributo startProgress. 
Se endProgress for igual a startProgress, então a transmissão 
permanece em um valor fixo pela duração da transmissão. 
O valor default é 1.0 |

transition | direction | 
Especifica a direção em que ocorrerá a transição. 
Os valores permitidos são “forward” e “reverse”. 
O valor default é “forward”. 
Nem todas as transições terão 
interpretações reversas significantes. 
Por exemplo, um crossfade não é uma transição geométrica e, 
portanto, não tem interpretação de direção reversa. 
As transições que não têm interpretação reversa devem 
ter o atributo direction ignorado e 
o valor default "forward" assumido |

transition | fadeColor | 
Especifica a cor final ou inicial do fade, 
se o valor do atributo type for “fade” e 
o valor do atributo subtype for “fadeToColor” ou “fadeFromColor”. 
Caso contrário o atributo fadeColor deve 
obrigatoriamente ser ignorado. 
O valor default é “black”. |

transition | horRepeat | 
Especifica quantas vezes será realizado o padrão 
de transições ao longo do eixo horizontal. 
O valor default é 1 (o padrão ocorre uma vez horizontalmente) |

transition | vertRepeat | 
Especifica quantas vezes será realizado o padrão 
de transição ao longo do eixo vertical. 
O valor default é 1 (o padrão ocorre uma vez verticalmente) |

transition| borderWidth | 
Especifica a largura de uma borda 
gerada ao longo de uma área apagada. 
Os valores permitidos são inteiros maiores ou iguais a 0. 
Se o valor de borderWidth for igual a 0, então convém que 
nenhuma borda seja gerada ao longo da área apagada. 
O valor default é 0. 
Se o valor do atributo type não for "fade", 
então o atributo borderColor especifica o conteúdo de 
uma borda gerada ao longo de uma área apagada. 
Se o valor desse atributo for uma cor, 
então a borda gerada é preenchida com a cor definida. 
Se o valor deste atributo for “blend”, 
então a borda gerada é uma mistura 
aditiva (ou blur) das fontes de mídia. 
O valor default para esse atributo é “black”. |

connectorBase | self |
Permite o agrupamento de conectores. 
O conteúdo exato de uma base de conectores é 
especificado por um perfil de linguagem que 
utiliza as facilidades oferecidas pelos conectores. |

connectorBase | id |
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML. |

causalConnector | self |
Representa uma relação causal que pode ser utilizada 
por elementos <link> em documentos. 
Em uma relação causal, uma condição 
deve obrigatoriamente ser satisfeita 
para disparar uma ação.
Especifica, através de seus elementos-filhos, 
um conjunto de pontos da interface, chamados papéis.
Este elemento tem uma expressão de cola (glue expression), 
que define uma expressão de condição e uma de ação. 
Quando a expressão de condição é satisfeita, 
a expressão de ação deve obrigatoriamente ser executada. |

causalConnector | id |
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML |

simpleCondition | self |
Define uma expressão de condição simples 
que deve ser satisfeita para executar uma ação. |

simpleCondition | role |
Um role (papel) é um ponto de interface do conector, 
que pode ser associado a interfaces de nós por 
um elo que referencia o conector. 
O valor deste atributo deve obrigatoriamente 
ser único no conjunto de roles do conector.|

simpleCondition | eventType |
Define um tipo de evento do conector,
que pode ser de presentation, selection e attribution. 
Pode ser inferido pelo valor do atributo role se 
forem utilizados valores reservados.
Se um valor de eventType for “selection”, o role pode 
também definir sobre qual dispositivo a seleção se refere 
(por exemplo, teclas de um teclado ou controle remoto), 
através do seu atributo key.|

simpleCondition | transition |
Define um tipo de transição a qual a condição se refere.
Pode ser inferido pelo valor do atributo role se 
forem utilizados valores reservados.|

simpleCondition | min |
Especifica o número mínimo (atributo min) dos participantes 
que podem exercer o papel (número de binds) quando 
o <causalConnector> é utilizado para criar um <link>. 
O valor mínimo da cardinalidade deve obrigatoriamente 
ser sempre um valor finito positivo, maior que zero e 
menor ou igual ao valor máximo da cardinalidade. 
Se a cardinalidade mínima não for informada, “1” 
deve obrigatoriamente ser assumido como valor (default). |

simpleCondition | max |
Especifica o máximo (atributo max) dos participantes 
que podem exercer o papel (número de binds) quando 
o <causalConnector> é utilizado para criar um <link>. 
Se a cardinalidade máxima não for informada, “1” 
deve obrigatoriamente ser assumido como valor (default). 
Quando o valor máximo de cardinalidade for maior que um, 
vários participantes podem executar o mesmo papel (role), 
isto é, pode haver várias ligações (binds) 
conectando diversos nós ao mesmo papel. 
O valor “unbounded” pode ser dado ao atributo max, 
se o role puder ter binds ilimitados associados a ele. |

simpleCondition | qualifier |
Especifica a relação lógica entre os binds de condição simples. 
Os valores possíveis para o atributo qualifier são: 
“or” (ou) ou “and” (e). 
Se o qualificador (atributo qualifier) estabelecer 
um operador lógico “or”, o elo será acionado 
quando da ocorrência de qualquer condição. 
Se o qualificador estabelecer um operador lógico “and”, 
o elo será acionado após a ocorrência 
de todas as condições simples. 
Se não especificado, deve-se obrigatoriamente 
assumir o valor (default) “or”. |

simpleCondition | delay |
Especifica que a condição é verdadeira após 
um período de retardo a partir do momento 
em que a transição ocorre. |

simpleCondition | key |
Especifica qual tecla do controle foi selecionada. |

compoundCondition | self |
Define uma expressão de condição composta, 
ou seja, composições de condições simples 
que deve ser satisfeita para executar uma ação. |

compoundCondition | operator |
Especifica o relacionamento de seus elementos-filhos: 
<simpleCondition>, <compoundCondition>, 
<assessmentStatement> e <compoundStatement>.
Os valores possiveis são Booleanos (“and” ou “or”). |

compoundCondition | delay |
Especifica que a condição composta é verdadeira 
depois que um tempo de retardo do momento em 
que a expressão, relacionada a seus 
elementos-filhos, for verdadeira. |

simpleAction | self |
Define uma expressão de ação simples que capta ações 
que podem ser executadas em relações causais. |

simpleAction | role |
Um role (papel) é um ponto de interface do conector, 
que pode ser associado a interfaces de nós por 
um elo que referencia o conector. 
O valor deste atributo deve obrigatoriamente 
ser único no conjunto de roles do conector. |

simpleAction | eventType |
Define um tipo de evento do conector,
que pode ser de presentation, selection e attribution. 
Pode ser inferido pelo valor do atributo role se 
forem utilizados valores reservados.
Se um valor eventType for “attribution”, 
o elemento <simpleAction> também deve 
obrigatoriamente definir o valor a ser atribuído, 
através de seu atributo value. |

simpleAction | value |
Se um valor eventType for “attribution”, 
este atributo deve obrigatoriamente 
definir o valor a ser atribuído.
Se esse valor for especificado como “$anyName” 
(onde o $ é símbolo reservado e anyName 
é qualquer cadeia de caracteres, 
exceto um dos nomes reservados para papéis), 
o valor a ser atribuído deve ser obtido da 
propriedade ligada à role=“anyName”, 
definida em um elemento <bind> do 
elemento <link> que utiliza o conector. 
Se esse valor não puder ser obtido,
 nenhuma atribuição deve ser realizada. |

simpleAction | min |
Especifica o número mínimo (atributo min) dos participantes 
que podem exercer o papel (número de binds) quando 
o <causalConnector> é utilizado para criar um <link>. 
O valor mínimo da cardinalidade deve obrigatoriamente 
ser sempre um valor finito positivo, maior que zero e 
menor ou igual ao valor máximo da cardinalidade. 
Se a cardinalidade mínima não for informada, “1” 
deve obrigatoriamente ser assumido como valor (default). |

simpleAction | max |
Especifica o máximo (atributo max) dos participantes 
que podem exercer o papel (número de binds) quando 
o <causalConnector> é utilizado para criar um <link>. 
Se a cardinalidade máxima não for informada, “1” 
deve obrigatoriamente ser assumido como valor (default). 
Quando o valor máximo de cardinalidade for maior que um, 
vários participantes podem executar o mesmo papel (role), 
isto é, pode haver várias ligações (binds) 
conectando diversos nós ao mesmo papel. 
O valor “unbounded” pode ser dado ao atributo max, 
se o role puder ter binds ilimitados associados a ele. |

simpleAction | delay |
Especifica, quando definido, que a ação deve 
obrigatoriamente ser disparada apenas após 
esperar pelo tempo especificado. |

simpleAction | qualifier |
Especifica a relação lógica entre os binds de ação simples. 
Os valores possíveis para o atributo qualifier são: 
“seq” (sequêncial) ou “par” (paralelo). |

compoundAction | self |
Define uma expressão de ação composta, 
ou seja, composições de ações simples 
que devem ser executadas. |

compoundAction | operator |
Especfica o relacionamento entre seus elementos-filhos: 
<simpleAction> e <compoundAction>. 
Ações compostas paralelas ("par") e sequênciais ("seq") 
especificam que a execução das ações deve 
obrigatoriamente ser feita em qualquer ordem ou 
em uma ordem específica, respectivamente. |

compoundAction | delay |
Especifica que a ação composta deve obrigatoriamente 
ser aplicada após o retardo especificado. |

attributeAssessment | self |
--/--. |

attributeAssessment | role |
Um role (papel) é um ponto de interface do conector, 
que pode ser associado a interfaces de nós por 
um elo que referencia o conector. 
O valor deste atributo deve obrigatoriamente 
ser único no conjunto de roles do conector. |

attributeAssessment | eventType |
Define um tipo de evento do conector,
que pode ser de presentation, selection e attribution.
Se o valor de eventType for “selection” (seleção), 
convém ao <attibuteAssessment> também definir sobre 
qual equipamento a seleção se refere 
(por exemplo, teclas de um teclado ou controle remoto), 
através do seu atributo key. 
Se o valor eventType for “presentation”, 
o atributo attributeType especifica o atributo de evento 
(“occurrences” ou “repetitions”) ou o estado do evento (“state”); 
se o valor eventType for “selection”, 
o atributo attributeType é opcional e, se presente, 
pode ter o valor “occurrences” (default) ou “state”; 
se o eventType for “attribution” o attributeType é opcional e 
pode ter o valor “nodeProperty” (default), 
“occurrences”, “repetition” ou “state”. |

attributeAssessment | attributeType |
Especifica qual tipo de atribuição será executada 
em relação ao que foi definido no atributo eventType. |

attributeAssessment | offset |
Um valor de compensação que pode ser adicionado 
a um <attributeAssessment> antes da comparação, 
por exemplo, uma compensação pode ser adicionada 
a uma avaliação de atributo para especificar: 
“a posição vertical da tela mais 50 pixels”. |

attributeAssessment | key |
Especifica qual tecla do controle foi selecionada. |

valueAssessment | self |
Especifica um valor que pode ser um valor de estado de evento, 
ou qualquer valor a ser comparado com 
uma propriedade do nó ou atributo de evento. |

valueAssessment | value |
Deve obrigatoriamente assumir um valor de estado de evento, 
ou qualquer valor a ser comparado com 
uma propriedade do nó ou atributo de evento. |

assessmentStatement | self |
Define uma comparação a ser realizada a partir dos valores
inferidos dos seus elementos-filhos 
(elementos <attributeAssessment> e <valueAssessment>). |

assessmentStatement | comparator |
Compara os valores inferidos a partir dos seus elementos-filhos 
(elementos <attributeAssessment> e <valueAssessment>). |

compoundStatement | self |
Especfica o relacionamento entre seus elementos-filhos: 
<assessmentStatement> e <compoundStatement>. |

compoundStatement | operator |
Especfica o relacionamento entre seus elementos-filhos: 
<assessmentStatement> e <compoundStatement>.
Com um valor Booleano (“and” ou “or”). |

compoundStatement | isNegated |
Pode ser definido para especificar se o elemento-filho 
do <compoundStatement> deve obrigatoriamente 
ser negado antes que a operação Booleana seja avaliada. |

connectorParam | self |
Utilizados para parametrizar valores 
dos atributos dos conectores. 
Para especificar quais atributos recebem 
valores de parâmetro definidos pelo conector, 
seus valores são especificados como o nome 
do parâmetro, precedido pelo símbolo $. |

connectorParam | name |
Especifica qual o nome do atributo que será parametrizado. |

connectorParam | type |
Especficia qual o tipo de dado do atributo 
que está sendo parametrizado. |

body | self | 
Em NCL o <body> é tratado como um <context>. 
Quando um documento NCL é importado através do <importNCL> 
o elemento <body> importado será 
tratado como um elemento <context> |

body | id | 
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML |

context | self | 
Contêm um conjunto de nós e um conjunto de elos |

context | id | 
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML |

context | refer | 
Referencia um elemento id que será reusado. 
Se o nó referenciado for definido dentro 
de um documento D importado, o valor do atributo refer 
deve obrigatoriamente ter o formato “alias#id”, 
onde “alias” é o valor do atributo alias 
associado ao documento D importado. 
Quando um elemento declara um atributo refer, 
todos os atributos e elementos-filhos definidos 
pelo elemento referenciado são herdados |

port | self | 
Especifica uma porta de um nó de composição 
com seu respectivo mapeamento para uma interface |

port | id | 
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML |

port | interface | 
Identifica uma interface de um componente 
(objetos de mídia ou nós de composição) |

port | component | 
Identifica um dos componentes 
(objetos de mídia ou nós de composição) 
pertencentes ao seu contexto |

media | self | 
Define os tipos básicos de objetos de mídia |

media | id | 
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML |

media | src | 
Define um URI (Uniform Resource Identifier) 
do conteúdo do objeto |

media | type | 
Define o tipo do objeto. 
Deve obrigatoriamente seguir 
o formato MIME Media Types |

media | descriptor | 
Refere-se a um elemento do conjunto de descritores 
do documento (<descriptor> ou <descriptorSwicth>). 
Determina a associação dos descritores 
com os componentes do documento |

media | refer | 
Referencia um elemento id que será reusado. 
Se o nó referenciado for definido dentro 
de um documento D importado, o valor do atributo refer 
deve obrigatoriamente ter o formato “alias#id”, 
onde “alias” é o valor do atributo alias 
associado ao documento D importado. 
Quando um elemento declara um atributo refer, 
todos os atributos e elementos-filhos definidos 
pelo elemento referenciado são herdados |

area | self | 
Definição de âncoras de conteúdo representando 
porções espaço-temporais, textuais, 
com base no número de amostras de áudio 
ou frames de vídeo |

area | id | 
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML |

area | coords | 
Define âncoras de conteúdo representando 
porções espaciais (como em XHTML) |

area | begin | 
Define o inicio de âncoras de conteúdo 
representando porções temporais |

area | end | 
Define o fim de âncoras de conteúdo 
representando porções temporais |

area | text | 
Define uma cadeia de caracteres no 
texto de uma âncora textual |

area | position | 
Define a ocorrência de cadeias de 
caracteres no texto de uma âncora textual |

area | first | 
Define a amostra/frame inicial da âncora do áudio/vídeo |

area | last | 
Define a amostra/frame final da âncora do áudio/vídeo |

area | label | 
Especifica uma cadeia de caracteres que deve ser 
utilizada pelo exibidor de mídias para 
identificar uma região de conteúdo |

property | self | 
É utilizado para definir uma propriedade 
ou grupo de propriedades de um nó, 
como uma de suas interfaces (âncora) |

property | id | 
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML |

property | name | 
Indica o nome da propriedade ou grupo de propriedades |

property | value | 
Atributo opcional que define um valor inicial 
para a propriedade name. 
O elemento pai não pode ter elementos <property> 
com os mesmos valores para o atributo name |

switchPort | self | 
Permite a criação de interfaces de elemento <switch>, 
que podem ser mapeadas a um conjunto de interfaces 
alternativas de nós internos, permitindo a 
um elo ancorar no componente escolhido 
quando o <switch> é processado |

switchPort | id | 
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML |

mapping | self | 
Define um caminho a partir do <switchPort> 
para uma interface (atributo interface) 
de um dos componentes do <switch> 
(especificados por seu atributo component) |

mapping | component | 
Identifica um dos componentes do <switch> 
no qual o mapeamento se encontra |

mapping | interface | 
Identifica uma interface do componente 
referenciado pelo atributo component |

switch | self | 
Permite a definição de nós alternativos a serem 
escolhidos em tempo de apresentação do documento |

switch | id | 
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML |

switch | refer | 
Referencia um elemento id que será reusado. 
Se o nó referenciado for definido dentro de 
um documento D importado, o valor do atributo refer 
deve obrigatoriamente ter o formato “alias#id”, 
onde “alias” é o valor do atributo alias 
associado ao documento D importado. 
Quando um elemento declara um atributo refer, 
todos os atributos e elementos-filhos definidos 
pelo elemento referenciado são herdados |

defaultComponent | self | 
Identifica o elemento (default) que deve 
obrigatoriamente ser selecionado se nenhuma 
das regras bindRule for avaliada como verdadeira |

defaultComponent | component | 
Referencia o elemento (default), filho do <switch>, 
que deve obrigatoriamente ser selecionado se nenhuma 
das regras bindRule for avaliada como verdadeira |

link | self | 
Responsável por definir os elos, que utilizam conectores |

link | id | 
Identifica univocamente o elemento dentro do documento NCL. 
Seu valor é um identificador XML |

link | xconnector | 
Atributo obrigatório que refere-se ao URI 
de um conector hipermídia. 
A referência deve obrigatoriamente ter o formato 
alias#connector_id, ou documentURI_value#connector_id, 
para conectores definidos em um documento externo, 
ou simplesmente connector_id, 
para conectores definidos no próprio documento. |

bind | self | 
Permite associar nós a papéis (roles) do conector |

bind | role | 
Usado para fazer referência a um papel do conector |

bind | component | 
Usado para identificar um dos componentes 
(objetos de mídia ou nós de composição) 
pertencentes ao seu contexto |

bind | interface | 
Usado para fazer referência a uma interface de 
um componente (objetos de mídia ou nós de composição). 
Pode referir-se a qualquer interface do nó, isto é, 
uma âncora, uma propriedade ou uma porta, 
se for um nó de composição. 
O atributo interface é opcional. 
Quando não é especificado, a associação é feita 
com todo o conteúdo do nó |

bind | descriptor | 
Usado para fazer referência a um descritor 
a ser associado com o nó, 
conforme definido no <descriptorBase> |

bindParam | self | 
Definem valores para os parâmetros 
definidos pelos conectores |

bindParam | name | 
Deve obrigatoriamente fazer referência 
ao nome de um parâmetro do conector |

bindParam | value | 
Deve obrigatoriamente definir um valor 
a ser atribuído ao respectivo parâmetro |

linkParam | self | 
Definem valores para os parâmetros 
definidos pelos conectores |

linkParam | name | 
Deve obrigatoriamente fazer referência 
ao nome de um parâmetro do conector |

linkParam | value | 
Deve obrigatoriamente definir um valor 
a ser atribuído ao respectivo parâmetro